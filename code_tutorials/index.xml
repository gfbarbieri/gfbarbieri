<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code_tutorials on Greg Barbieri</title><link>https://gfbarbieri.github.io/code_tutorials/</link><description>Recent content in Code_tutorials on Greg Barbieri</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 23 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://gfbarbieri.github.io/code_tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Extract Data from Word Documents.</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/files/extract_data_word_doc/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/files/extract_data_word_doc/</guid><description>Extract data from a Microsoft Word document. Word documents are essentially XML files.
Imports from docx import Document import pandas as pd Find Tables in Word Document Open a word file.
doc = Document(&amp;#39;file.docx&amp;#39;) Find the tables in the Word document.
tables = doc.tables print(f&amp;#34;There are {len(tables)}tables in this Word document.&amp;#34;) There are 2 tables in this Word document. Extract Data Extract data from each of the tables.</description></item><item><title>Linear Optimization with Scipy</title><link>https://gfbarbieri.github.io/code_tutorials/math/optimization/linear_optimization/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/optimization/linear_optimization/</guid><description>Simple Linear Optimization
Imports from scipy.optimize import linprog Define the Problem Maximize the utility function $U(x) = 2 x_1 + 2 x_2$ subject to the budget constraint $4 x_1+ 4 x_2 = 40$.
Build the Coefficient Matrix Create a list where each element is the coefficient for each variable. This is the coefficient matrix.
Note: The linprog function minimizes the objective, but we want to maximize the objective. In order to do that, we want the negative of the objective function, that is $-1*U(x)$</description></item><item><title>Non-Linear Optimizaiton with Sympy</title><link>https://gfbarbieri.github.io/code_tutorials/math/optimization/non-linear_optimization_sym/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/optimization/non-linear_optimization_sym/</guid><description>Find optimal values of x and y using symbolic methods.
Imports import sympy as sp Define Variables x, y, p_x, p_y, l = sp.symbols(&amp;#39;x y p_x p_y lambda&amp;#39;) Define Objective and Constraint Functions f = 2*x*y g = 40 - p_x*x - p_y*y Define Lagrangian L = f + l*g Find First Order Conditions L_x = sp.diff(L,x) L_y = sp.diff(L,y) L_l = sp.diff(L,l) Solve for Optimal Values solu = sp.solve([L_x, L_y, L_l], [x, y, l], dict=True) solu [{x: 20/p_x, y: 20/p_y, lambda: 40/(p_x*p_y)}] Solve for $p_x =4$ and $p_y = 8$.</description></item><item><title>Non-Linear Optimization with Scipy</title><link>https://gfbarbieri.github.io/code_tutorials/math/optimization/non-linear_optimization/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/optimization/non-linear_optimization/</guid><description>Optimize a Non-linear Function
Imports from scipy.optimize import minimize Define the Problem Maximize the utility function $U(x) = 2 x_1 x_2$ subject to the budget constraint $8 x_1+ 4 x_2 = 40$.
Define the Objective Function Create a Python function called f that takes in a vector called x, so f(x). The vector x can be expected to have two elements, one for each subscript in the objective function. The Python function f(x) should return a value equal to the objective function.</description></item><item><title>Write to SAS Dataset</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/files/write_to_sas_dataset/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/files/write_to_sas_dataset/</guid><description>Write Pandas Data Frame to SAS dataset. Requires a SAS installation. SASPy documentation
Imports import os import saspy import pandas as pd Set PATH Environment Variable Add the location of the sspiauth.dll file to the PATH environment variables. For those who are unable to edit environmental variables without administrative permissions, execute the following code at run time with the correct file location.
os.environ[&amp;#34;PATH&amp;#34;] += os.environ[&amp;#34;PATH&amp;#34;][:-1] + &amp;#39;C:\\SASHome\\SASFoundation\\9.4\\core\\sasext;&amp;#39; Create Pandas Data Frame df = pd.</description></item><item><title>Write to SQLite3 Table</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/databases/write_data_sqlite/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/databases/write_data_sqlite/</guid><description>Write to table in SQLite database.
Imports import sqlite3 import pandas as pd Create Pandas Data Frame df = pd.DataFrame(data=[[&amp;#39;apple&amp;#39;,&amp;#39;iris&amp;#39;,&amp;#39;oak&amp;#39;]], columns=[&amp;#39;fruit&amp;#39;,&amp;#39;flower&amp;#39;,&amp;#39;tree&amp;#39;]) Connect to SQLite database If database file does not exist, it will be created.
db = sqlite3.connect(&amp;#34;sqlite.db&amp;#34;) Insert Pandas DataFrame into Database Insert into database.
con is the SQLite database connection. name is the name of the table in the SQLite database. if_exists determines how to handle inserting data conditional on the table existing or not.</description></item><item><title>Connect to an Oracle Database</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/databases/connect_oracle_db/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/databases/connect_oracle_db/</guid><description>Connect to Oracle database.
If a service name is defined in the tsanames.ora configuration file (C:\&amp;lt;oracle roots&amp;gt;\network\admin), then pass the service name to dsn. Otherwise, create the full URL and pass it to dsn: &amp;lsquo;host:port/service_name&amp;rsquo;. See documentation for more details.
Imports import cx_Oracle import getpass Establish Connection Retrieve username and password.
user_id = input() password = getpass.getpass() or_conn = cx_Oracle.connect(user=user_id, password=password, dsn=&amp;#39;&amp;lt;SERVICE NAME or HOST:PORT/SERVICE_NAME&amp;gt;&amp;#39;) or_conn.current_schema = &amp;#39;&amp;lt;SCHEMA&amp;gt;&amp;#39;</description></item><item><title>Download PDF Files</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/files/download_pdf_file/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/files/download_pdf_file/</guid><description>Imports from PyPDF2 import PdfFileReader import requests Download PDF Content url = &amp;#34;http://sites.nationalacademies.org/cs/groups/dbassesite/documents/webpage/dbasse_194828.pdf&amp;#34; response = requests.get(url) Write PDF Content to File Use .iter_content() for large files or streaming.
with open(&amp;#34;data_day.pdf&amp;#34;, &amp;#34;wb&amp;#34;) as pdf: pdf.write(response.content)</description></item><item><title>Download Text Files</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/files/download_text_file/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/files/download_text_file/</guid><description>Imports import requests Download Text File The Bureau of Labor Statistics makes some historical price data available as text files. /cu.data.1.AllItems is a text file with historical price data.
response = requests.get(&amp;#34;http://download.bls.gov/pub/time.series/cu/cu.data.1.AllItems&amp;#34;) Save as Text File Convert response to text.
cpi_text = response.text Write to drive.
with open(&amp;#39;data.txt&amp;#39;, &amp;#39;w&amp;#39;, newline=&amp;#39;&amp;#39;) as f: f.write(cpi_text)</description></item><item><title>Download Zip Files</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/files/download_zip_file/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/files/download_zip_file/</guid><description>Imports import requests Download ZIP file Download the data using requests library.
url = &amp;#34;https://archive.ics.uci.edu/ml/machine-learning-databases/00360/AirQualityUCI.zip&amp;#34; response = requests.get(url) Write data to disk.
with open(&amp;#34;AirQualityUCI.zip&amp;#34;, &amp;#34;wb&amp;#34;) as f: f.write(response.content)</description></item><item><title>Extract Data from PDF Table.</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/files/extract_data_pdf_table/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/files/extract_data_pdf_table/</guid><description>Extract state-level telephone usage estimates from a table in a PDF.
Imports from bs4 import BeautifulSoup import pandas as pd from PyPDF2 import PdfFileReader Wrangling PDF Table With PdffileReader, extract text from the first page of the PDF. Find the tabular data. The line breaks are not in ideal places. This part will always require lots of trial and error. rows = [] with open(&amp;#34;state-level-nhis-estimates.pdf&amp;#34;, &amp;#39;rb&amp;#39;) as f: lines = PdfFileReader(f).</description></item><item><title>Extract Data from Text Files.</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/files/extract_data_text_file/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/files/extract_data_text_file/</guid><description>Imports import io import pandas as pd import requests Download Text File Download historical price data as text files.
response = requests.get(&amp;#34;http://download.bls.gov/pub/time.series/cu/cu.data.1.AllItems&amp;#34;) Create Pandas Data Frame Use io.StrongIO(response.text) to access data stored in memory. Otherwise, pass response directly to Pandas. Use read_csv to create a Pandas Data Frame. This file is separated by tab characters (&amp;rsquo;\t&amp;rsquo;).
df = pd.read_csv(filepath_or_buffer=io.StringIO(response.text), sep=&amp;#39;\t&amp;#39;) df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .</description></item><item><title>Extract Data from Zip Files.</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/files/extract_zip_file/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/files/extract_zip_file/</guid><description>Imports import zipfile Extract Zip File with zipfile.ZipFile(&amp;#34;AirQualityUCI.zip&amp;#34;, &amp;#34;r&amp;#34;) as f: f.extractall()</description></item><item><title>Query Oracle using Bind Variables</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/databases/query_oracle_bind/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/databases/query_oracle_bind/</guid><description>Query Oracle Database with Bind Variables
Imports import getpass import cx_Oracle Establish Connection user_id = input(&amp;#39;User ID: &amp;#39;) password = getpass.getpass() ora_conn = cx_Oracle.connect(user=user_id, password=password, dsn=&amp;#39;&amp;lt;SERVICE NAME OR HOST/SERVICE&amp;gt;&amp;#39;) ora_conn.current_schema = &amp;#39;&amp;lt;SCHEMA&amp;gt;&amp;#39; Execute Query Identify bind variables in query using :&amp;lt;BIND VARIABLE&amp;gt;. Pass value to the bind variable when executing the SQL.
Bind Variable by Position
sql = &amp;#34;&amp;#34;&amp;#34; SELECT c.* FROM &amp;lt;TABLE&amp;gt; c WHERE c.&amp;lt;COLUMN&amp;gt; IN (:&amp;lt;BIND VARIABLE 1&amp;gt;, :&amp;lt;BIND VARIABLE 2&amp;gt;) &amp;#34;&amp;#34;&amp;#34; ora_cur = ora_conn.</description></item><item><title>Read SAS Datasets</title><link>https://gfbarbieri.github.io/code_tutorials/data_sources/files/read_sas_file/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/data_sources/files/read_sas_file/</guid><description>Imports import pandas as pd Read SAS Dataset Passing encoding='latin-1' has proved helpful in avoiding errors in string formats.
df = pd.read_sas(&amp;#34;input_dataset.sas7bdat&amp;#34;, encoding=&amp;#39;latin-1&amp;#39;) df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }
fruit flower tree 0 apple iris oak 1 grape juniper ash 2 strawberry chamomile pine</description></item><item><title>Solve System of Linear Equations</title><link>https://gfbarbieri.github.io/code_tutorials/math/linear_algebra/system_linear_eq/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/linear_algebra/system_linear_eq/</guid><description>Solve basic systems of linear equations: SymPy Documentation
Imports import sympy as sp $$ 5x - y + 3z = 12 \ 3x + y + z = 2 \ x + 2y + z = 0 $$
Define System of Equations Create system in $\textbf{A}\textbf{x}=\textbf{b}$ form.
X = [5, -1, 3] Y = [3, 1, 1] Z = [1, 2, 1] B = [12, 2, 0] A = sp.</description></item><item><title>Arranging Kids in Seats</title><link>https://gfbarbieri.github.io/code_tutorials/math/probability/arranging_kids_seats/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/probability/arranging_kids_seats/</guid><description>This introductory question comes directly from Probability For the Enthusiastic Beginner, Chapter 1, page 26.
Six girls and four boys are to be assigned to ten seats in a row, with the stipulations that a girl sits in the third seat and a boy sits in the eighth seat. How many arrangements are possible? Imports import itertools Create All Possible Arrangements The length of our list confirms the expected number of arrangements.</description></item><item><title>Birthday Problem</title><link>https://gfbarbieri.github.io/code_tutorials/math/probability/birthday_problem/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/probability/birthday_problem/</guid><description>Birthday Problem If there are n people in the room, the probability that all n birthdays are distinct equals (none are equal):
$\displaystyle\prod_{k=1}^{n}{\frac{365-(k-1)}{365}}$
Therefore, the probability is 1 minus the results of the product.
Imports import numpy as np import matplotlib.pyplot as plt Calculate Probability indiv_prob_list = [] for num in range(1,101): indiv_prob = (365-(num-1))/365 indiv_prob_list.append(indiv_prob) Plot Probability plt.plot(np.linspace(1,100,100), 1-np.cumprod(indiv_prob_list)) [&amp;lt;matplotlib.lines.Line2D at 0x7fb171e3d6a0&amp;gt;]</description></item><item><title>Calculate a Geographic Buffer</title><link>https://gfbarbieri.github.io/code_tutorials/gis/basics/calc_geo_buffer/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/gis/basics/calc_geo_buffer/</guid><description>Calculate a buffer around a geographic area.
Imports import geopandas as gpd import matplotlib.pyplot as plt Load State Shape File gdf_st = gpd.read_file(substate, geometry=&amp;#39;geometry&amp;#39;) Subset to Washington, DC Convert to the CRS EPSG 6933. The main benefit: units are in meters.
gdf_dc = gdf_st.loc[gdf_st[&amp;#39;STUSPS&amp;#39;] == &amp;#39;DC&amp;#39;].to_crs(epsg=6933) Find Buffer Around Polygon Use buffer method to calculate the buffer around the polygon. Pass 1609 to distance to create a 1 mile buffer around the DC polygon.</description></item><item><title>Calculate a Geographic Centroid</title><link>https://gfbarbieri.github.io/code_tutorials/gis/basics/calc_geo_centroid/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/gis/basics/calc_geo_centroid/</guid><description>Calculate centroid of a geographic area.
Imports import geopandas as gpd import matplotlib.pyplot as plt Load Shape File gdf_st = gpd.read_file(substate, geometry=&amp;#39;geometry&amp;#39;) Subset to Washington, DC gdf_dc = gdf_st.loc[gdf_st[&amp;#39;STUSPS&amp;#39;] == &amp;#39;DC&amp;#39;] Calculate Centroid gdf_dc_ct = gdf_dc.centroid Plot fig, ax = plt.subplots() gdf_dc.plot(ax=ax) gdf_dc_ct.plot(ax=ax, color=&amp;#39;yellow&amp;#39;) &amp;lt;AxesSubplot:&amp;gt;</description></item><item><title>Download Geographic Databases</title><link>https://gfbarbieri.github.io/code_tutorials/gis/basics/download_geodatabase/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/gis/basics/download_geodatabase/</guid><description>Download Census Geo-database and the database documentation.
TIGER Geodatabases are spatial extracts from the Census Bureau MAF/TIGER database, designed for use with Esri’s ArcGIS. These files do not include demographic data, but they contain geographic entity codes that can be linked to Census Bureau demographic data, available on American FactFinder.
Imports import requests Download Census Geodatabase response = requests.get(&amp;#39;https://www2.census.gov/geo/tiger/TGRGDB18/tlgdb_2018_a_us_substategeo.gdb.zip&amp;#39;) with open(&amp;#39;census_gdb.zip&amp;#39;, &amp;#39;wb&amp;#39;) as zf: zf.write(response.content) Download Census Geodatabase Documentation Iterate over content with iter_content if the file is very large, otherwise content suffices without the for-loop.</description></item><item><title>Find Difference Between Geographies</title><link>https://gfbarbieri.github.io/code_tutorials/gis/basics/find_geographic_difference/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/gis/basics/find_geographic_difference/</guid><description>GIS intersection using overlay.
Imports import geopandas as gpd Import Shape Files Import the U.S. State shape file and the U.S. Urban Area shape file.
gdf_st = gpd.read_file(substate, geometry=&amp;#39;geometry&amp;#39;) gdf_ua = gpd.read_file(national, geometry=&amp;#39;geometry&amp;#39;) Subset Shape Files Subset to Virginia
gdf_st_va = gdf_st.loc[gdf_st[&amp;#39;STUSPS&amp;#39;] == &amp;#39;VA&amp;#39;].reset_index(drop=True) Subset to Washington, DC urban area.
gdf_ua_wdc = gdf_ua.loc[gdf_ua[&amp;#39;NAMELSAD&amp;#39;] == &amp;#39;Washington, DC--VA--MD Urbanized Area&amp;#39;].reset_index(drop=True) Overlay Create a new shape which is the Washington, DC Urban Area without Virginia by passing difference.</description></item><item><title>First Ace</title><link>https://gfbarbieri.github.io/code_tutorials/math/probability/first_ace/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/probability/first_ace/</guid><description>You are dealt a 5 card hand with an ace. What is the probability that the first ace you are dealt is in the Nth card?
Import import numpy as np import matplotlib.pyplot as plt import itertools Create Deck of Cards We can ignore suits.
cards = np.array([&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;,&amp;#39;4&amp;#39;,&amp;#39;5&amp;#39;,&amp;#39;6&amp;#39;,&amp;#39;7&amp;#39;,&amp;#39;8&amp;#39;,&amp;#39;9&amp;#39;,&amp;#39;T&amp;#39;,&amp;#39;J&amp;#39;,&amp;#39;Q&amp;#39;,&amp;#39;K&amp;#39;,&amp;#39;A&amp;#39;]) cards = np.repeat(cards, 4) Find Location of the First Ace Dealt There are over 300 million permutations of 5-card hands. Don&amp;rsquo;t create them all and check each hand.</description></item><item><title>Game Show Problem</title><link>https://gfbarbieri.github.io/code_tutorials/math/probability/game_show_problem/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/probability/game_show_problem/</guid><description>The Game-Show Problem, or Monty Hall Problem according to Wikipedia.
Choose one of three doors, one of which has the desired prize. The game show host always opens one of the remaining two doors which does not have the prize behind it. The host then asks the player if they would like to switch doors. The player chooses whether to switch doors. The host assigns a prize to the player.</description></item><item><title>Load a Geographic Layer</title><link>https://gfbarbieri.github.io/code_tutorials/gis/basics/load_geo_layer/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/gis/basics/load_geo_layer/</guid><description>Load a layer from a geo-database table or shape file using GeoPandas.
Imports import geopandas as gpd Load Shape File Census shape files usually store long-lat coordinates in a column called &amp;lsquo;geometry&amp;rsquo;. Pass geometry to geometry argument.
CRS stands for Coordinate Reference System. This tells GeoPandas how you coordinates relate to one another, which is important for visualizations and calculations. EPSG:4326 is for WGS84 Latitude/Longitude, a common projection. Pass ESPG:4326 to crs argument.</description></item><item><title>Manipulate Shape Files</title><link>https://gfbarbieri.github.io/code_tutorials/gis/basics/basic_shape_file/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/gis/basics/basic_shape_file/</guid><description>Basic ESRI Shape File tasks using GeoPandas: import, edit, plot, export shape files.
Imports import geopandas as gpd Import Shape File gdf = gpd.read_file(&amp;#34;us_county.shp&amp;#34;) Edit Shape File gdf = gdf.loc[gdf[&amp;#39;STATEFP&amp;#39;] == &amp;#39;31&amp;#39;] Plot Shape File gdf.plot() &amp;lt;AxesSubplot:&amp;gt; Export Shape File Export creates all 5 files: .cpg, .dbf, .prj, .shp, .shx.
gdf.to_file(&amp;#39;us_state_31.shp&amp;#39;)</description></item><item><title>Poker Hands</title><link>https://gfbarbieri.github.io/code_tutorials/math/probability/poker_hands/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/probability/poker_hands/</guid><description>This problem is taken directly from Professor Morin&amp;rsquo;s Probability For the Enthusiastic Beginner, Chapter 1, page 38.
In a standard 52-card deck, how many different five-card poker hands are there of each of the following types?
Full House Straight Flush Flush Straight One pair Two pairs Three of a kind Four of a kind None of the above Imports import itertools import collections as col import numpy as np Create a Deck of Cards A deck of cards includes every unique pairing of the suits and ranks.</description></item><item><title>Print Names of Geographic Layers</title><link>https://gfbarbieri.github.io/code_tutorials/gis/basics/print_geo_layer_names/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/gis/basics/print_geo_layer_names/</guid><description>Print the name of the layers available a geo-database table.
Imports import fiona import os Determine Available Layers For each file listed in the geo-database with the file extension .gdbtable, print the name of the layers available.
for f in os.listdir(gdb_dir): f_name, f_ext = os.path.splitext(f) if f_ext == &amp;#39;.gdbtable&amp;#39;: layers = fiona.listlayers(os.path.join(gdb_dir, f)) print(f&amp;#34;{f_name}: {layers}&amp;#34;) a00000001 : ['GDB_SystemCatalog'] a00000002 : ['GDB_DBTune'] a00000003 : ['GDB_SpatialRefs'] a00000004 : ['GDB_Items'] a00000005 : ['GDB_ItemTypes'] a00000006 : ['GDB_ItemRelationships'] a00000007 : ['GDB_ItemRelationshipTypes'] a00000009 : ['Block_Group'] a0000000a : ['State'] a0000000b : ['County_Subdivision'] a0000000c : ['Consolidated_City'] a0000000d : ['Census_Tract'] a0000000e : ['Census_Designated_Place'] a0000000f : ['County'] a00000010 : ['Incorporated_Place']</description></item><item><title>Roll Dice, Flip Coins</title><link>https://gfbarbieri.github.io/code_tutorials/math/probability/roll_dice_flip_coins/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://gfbarbieri.github.io/code_tutorials/math/probability/roll_dice_flip_coins/</guid><description>This question comes from Professor David Morin&amp;rsquo;s book, Probability For the Enthusiastic Beginner, Chapter 1, page 26.
One person rolls two six-sided dice, and another person flips six two-sided coins. Which setup has the larger number of possible outcomes, assuming that the order matters? Imports import itertools Roll Two Six-Sided Dice Create a list representing a six-sided die.
die = [&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;,&amp;#39;4&amp;#39;,&amp;#39;5&amp;#39;,&amp;#39;6&amp;#39;] If you prefer the statement “rolling two six-sided die once”, then create all possible outcomes of rolling two identical die, returning a Cartesian product of the list die and itself.</description></item></channel></rss>